import { Command } from 'commander';
import { AnalysisWorkflow } from './graph/workflow.js';
import { createMemoryStore } from './memory/sqlite-memory.js';
import { AnalysisSession } from './memory/types.js';
import { MCPClientManager } from './clients/mcp-client-manager.js';
import { v4 as uuidv4 } from 'uuid';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import chalk from 'chalk';

// Áí∞Â¢ÉÂ§âÊï∞„ÅÆË™≠„ÅøËæº„Åø
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
dotenv.config({ path: join(__dirname, '..', '.env') });

const program = new Command();

// ÂÖ±ÈÄö„ÅÆ„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂàùÊúüÂåñÈñ¢Êï∞
async function initializeWorkflowWithManager() {
  console.log(chalk.blue('üîÑ Initializing analysis system...'));
  
  const memoryStore = createMemoryStore();
  await memoryStore.initialize();
  console.log(chalk.green('‚úÖ Memory store initialized'));

  const mcpManager = new MCPClientManager();
  console.log(chalk.blue('üîå Connecting to MCP servers...'));
  
  // MCP„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆÊé•Á∂öÂá¶ÁêÜ
  try {
    await mcpManager.connectAll();
    const health = await mcpManager.healthCheck();
    
    const healthyServers = Object.entries(health).filter(([_, isHealthy]) => isHealthy);
    const unhealthyServers = Object.entries(health).filter(([_, isHealthy]) => !isHealthy);
    
    console.log(chalk.green(`‚úÖ Connected servers: ${healthyServers.map(([name]) => name).join(', ')}`));
    if (unhealthyServers.length > 0) {
      console.log(chalk.yellow(`‚ö†Ô∏è  Unhealthy servers: ${unhealthyServers.map(([name]) => name).join(', ')}`));
    }
  } catch (error) {
    console.error(chalk.red('‚ùå Failed to connect to MCP servers:'), error);
    await memoryStore.close();
    throw error;
  }

  const workflow = new AnalysisWorkflow(memoryStore, mcpManager);
  await workflow.initialize();
  console.log(chalk.green('‚úÖ Analysis workflow ready'));
  
  return { memoryStore, mcpManager, workflow };
}

// ÂÖ±ÈÄö„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÈñ¢Êï∞
async function cleanup(memoryStore: any, workflow?: any) {
  console.log(chalk.blue('üßπ Cleaning up resources...'));
  
  if (workflow) {
    try {
      await workflow.cleanup();
      console.log(chalk.gray('‚úÖ Workflow cleaned up'));
    } catch (error) {
      console.error(chalk.red('‚ùå Workflow cleanup error:'), error);
    }
  }
  
  if (memoryStore) {
    try {
      await memoryStore.close();
      console.log(chalk.gray('‚úÖ Memory store closed'));
    } catch (error) {
      console.error(chalk.red('‚ùå Memory store cleanup error:'), error);
    }
  }
}

program
  .name('financial-agent')
  .description('Multi-agent financial analysis system')
  .version('1.0.0');

// CLIÂá¶ÁêÜ
program
  .command('analyze')
  .description('Analyze stocks and cryptocurrencies')
  .option('-s, --symbols <symbols>', 'Comma-separated list of symbols', 'AAPL,MSFT,bitcoin,ethereum')
  .option('-q, --query <query>', 'Analysis query', 'Provide investment analysis')
  .option('--health-check', 'Perform health check before analysis', false)
  .action(async (options) => {
    let memoryStore, workflow;
    
    try {
      // „Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ
      const components = await initializeWorkflowWithManager();
      memoryStore = components.memoryStore;
      workflow = components.workflow;
      
      // „Ç™„Éó„Ç∑„Éß„É≥: ÂÅ•ÂÖ®ÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
      if (options.healthCheck) {
        console.log(chalk.blue('üè• Performing detailed health check...'));
        const health = await workflow.healthCheck();
        console.log('Health status:', health);
        
        const unhealthyClients = Object.entries(health).filter(([_, isHealthy]) => !isHealthy);
        if (unhealthyClients.length > 0) {
          console.log(chalk.yellow(`‚ö†Ô∏è  Warning: ${unhealthyClients.length} clients are unhealthy`));
          console.log('Continuing with available clients...');
        }
      }

      const compiledWorkflow = workflow.createWorkflow();

      const initialState = {
        query: options.query,
        symbols: options.symbols.split(',').map((s: string) => s.trim()),
        timestamp: new Date().toISOString(),
        sessionId: uuidv4(),
        analyses: {},
        agentStatus: {
          stock: 'pending',
          crypto: 'pending',
          news: 'pending'
        },
        errors: []
      };

      console.log(chalk.blue("üöÄ Starting multi-agent analysis..."));
      console.log(chalk.cyan(`üìä Analyzing: ${initialState.symbols.join(', ')}`));
      console.log(chalk.cyan(`‚ùì Query: ${initialState.query}`));
      console.log(chalk.gray("‚îÄ".repeat(50)));

      // ÈÄ≤Ë°åÁä∂Ê≥ÅË°®Á§∫„ÅÆÊîπÂñÑ
      const analysisPromise = compiledWorkflow.invoke(initialState);
      
      // „Çø„Ç§„É†„Ç¢„Ç¶„ÉàÂá¶ÁêÜÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => {
          reject(new Error('Analysis timeout after 5 minutes'));
        }, 5 * 60 * 1000); // 5ÂàÜ„Çø„Ç§„É†„Ç¢„Ç¶„Éà
      });

      console.log(chalk.blue('‚è≥ Analysis in progress...'));
      const result = await Promise.race([analysisPromise, timeoutPromise]);
      
      console.log(chalk.green('‚úÖ Analysis completed'));
      console.log('Debug - Result structure:', Object.keys(result));
      
      // ÁµêÊûú„ÅÆÊ§úË®º
      if (!result.finalResult && !result.analyses) {
        console.log(chalk.yellow('‚ö†Ô∏è  Warning: Analysis completed but no results found'));
        console.log('Debug - Full result:', JSON.stringify(result, null, 2));
      }

      // „É°„É¢„É™„Å´‰øùÂ≠ò
      const session: AnalysisSession = {
        sessionId: initialState.sessionId,
        timestamp: initialState.timestamp,
        query: initialState.query,
        symbols: initialState.symbols,
        finalReport: result.finalResult ? {
          summary: result.finalResult.summary || 'Analysis completed',
          recommendations: result.finalResult.recommendations || [],
          confidence: result.finalResult.confidence || 0
        } : null
      };
      
      console.log(chalk.blue('üíæ Saving session to memory...'));
      await memoryStore.saveState(session);
      console.log(chalk.green('‚úÖ Session saved'));
      
      // ÁµêÊûúË°®Á§∫„ÅÆÊîπÂñÑ
      console.log("\n" + chalk.bold("=".repeat(50)));
      console.log(chalk.bold.blue("üìã FINAL ANALYSIS REPORT"));
      console.log(chalk.bold("=".repeat(50)));
      
      if (result.finalResult) {
        console.log(chalk.bold("\nüìù Summary:"));
        console.log(result.finalResult.summary || 'No summary available');
        
        if (result.finalResult.recommendations && result.finalResult.recommendations.length > 0) {
          console.log(chalk.bold("\nüí° Recommendations:"));
          result.finalResult.recommendations.forEach((rec: any, i: number) => {
            console.log(`${i + 1}. ${chalk.cyan(rec.symbol || 'N/A')}: ${chalk.yellow(rec.action || rec.recommendation)} - ${rec.reason || rec.reasoning}`);
          });
        }
        
        if (result.finalResult.confidence !== undefined) {
          console.log(chalk.bold(`\nüéØ Overall Confidence: ${chalk.green(result.finalResult.confidence)}%`));
        }
      } else {
        console.log(chalk.yellow("\n‚ö†Ô∏è  No final report generated"));
        
        // ÂÄãÂà•ÂàÜÊûêÁµêÊûú„ÇíË°®Á§∫
        if (result.analyses) {
          console.log(chalk.bold("\nüìä Individual Analysis Results:"));
          Object.entries(result.analyses).forEach(([type, analysis]: [string, any]) => {
            console.log(`\n${chalk.cyan(type.toUpperCase())} Analysis:`);
            if (analysis.error) {
              console.log(chalk.red(`  ‚ùå Error: ${analysis.error}`));
            } else {
              console.log(`  ‚úÖ Status: Completed`);
              // ÂàÜÊûêÁµêÊûú„ÅÆË©≥Á¥∞Ë°®Á§∫ÔºàÂèØËÉΩ„Å™Â†¥ÂêàÔºâ
              if (analysis.summary) {
                console.log(`  üìù Summary: ${analysis.summary}`);
              }
            }
          });
        }
      }
      
      // „Çª„ÉÉ„Ç∑„Éß„É≥ÊÉÖÂ†±„ÇíË°®Á§∫
      console.log(chalk.gray(`\nüîç Session ID: ${initialState.sessionId}`));
      console.log(chalk.gray(`üìÖ Timestamp: ${initialState.timestamp}`));
      
      // „ÇØ„É©„Ç§„Ç¢„É≥„ÉàÁä∂ÊÖã„ÇíË°®Á§∫
      const clientStatus = workflow.getClientStatus();
      console.log(chalk.gray(`üîå Active connections: ${clientStatus.join(', ')}`));
      
    } catch (error) {
      console.error(chalk.red("‚ùå Analysis failed:"), error);
      
      // „Ç®„É©„Éº„ÅÆË©≥Á¥∞ÊÉÖÂ†±
      if ((error as Error).stack) {
        console.error(chalk.gray("Stack trace:"), (error as Error).stack);
      }
      
      process.exit(1);
    } finally {
      await cleanup(memoryStore, workflow);
    }
  });

program
  .command('health')
  .description('Check system health')
  .action(async () => {
    let memoryStore, workflow;
    
    try {
      const components = await initializeWorkflowWithManager();
      memoryStore = components.memoryStore;
      workflow = components.workflow;
      
      console.log(chalk.blue('üè• Performing comprehensive health check...'));
      
      const health = await workflow.healthCheck();
      const clientStatus = workflow.getClientStatus();
      
      console.log(chalk.bold('\nüìä System Health Report'));
      console.log(chalk.gray('‚îÄ'.repeat(30)));
      
      console.log(chalk.bold('\nüîå MCP Connections:'));
      Object.entries(health).forEach(([server, isHealthy]) => {
        const status = isHealthy ? chalk.green('‚úÖ Healthy') : chalk.red('‚ùå Unhealthy');
        console.log(`  ${server}: ${status}`);
      });
      
      console.log(chalk.bold('\nüìà Statistics:'));
      const totalServers = Object.keys(health).length;
      const healthyServers = Object.values(health).filter(Boolean).length;
      console.log(`  Total servers: ${totalServers}`);
      console.log(`  Healthy servers: ${chalk.green(healthyServers)}`);
      console.log(`  Unhealthy servers: ${chalk.red(totalServers - healthyServers)}`);
      console.log(`  Health percentage: ${chalk.cyan(Math.round((healthyServers / totalServers) * 100))}%`);
      
      if (healthyServers === totalServers) {
        console.log(chalk.green('\nüéâ All systems operational!'));
      } else if (healthyServers > 0) {
        console.log(chalk.yellow('\n‚ö†Ô∏è  Some systems have issues but analysis can continue'));
      } else {
        console.log(chalk.red('\nüö® Critical: No healthy connections available'));
        process.exit(1);
      }
      
    } catch (error) {
      console.error(chalk.red('‚ùå Health check failed:'), error);
      process.exit(1);
    } finally {
      await cleanup(memoryStore, workflow);
    }
  });

// Êó¢Â≠ò„ÅÆhistory, session, clean„Ç≥„Éû„É≥„Éâ„ÇÇÊîπÂñÑ...
program
  .command('history')
  .description('Show recent analysis history')
  .option('-l, --limit <limit>', 'Number of sessions to show', '5')
  .action(async (options) => {
    const memoryStore = createMemoryStore();
    
    try {
      await memoryStore.initialize();
      const sessions = await memoryStore.getRecentSessions(parseInt(options.limit));
      
      console.log(chalk.bold("üìö Recent Analysis Sessions:"));
      console.log(chalk.gray("‚îÄ".repeat(50)));
      
      if (sessions.length === 0) {
        console.log(chalk.yellow("No analysis sessions found."));
        return;
      }
      
      sessions.forEach((session, i) => {
        console.log(`${chalk.cyan(i + 1)}. ${chalk.white(session.timestamp)}`);
        console.log(`   ${chalk.gray('Session ID:')} ${session.sessionId}`);
        console.log(`   ${chalk.gray('Query:')} ${session.query}`);
        console.log(`   ${chalk.gray('Symbols:')} ${session.symbols.join(', ')}`);
        if (session.finalReport) {
          console.log(`   ${chalk.gray('Confidence:')} ${chalk.green(session.finalReport.confidence)}%`);
        }
        console.log();
      });
    } catch (error) {
      console.error(chalk.red("‚ùå Failed to retrieve history:"), error);
      process.exit(1);
    } finally {
      await memoryStore.close();
    }
  });

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„ÅÆÊîπÂñÑ
process.on('unhandledRejection', (reason, promise) => {
  console.error(chalk.red('Unhandled Rejection at:'), promise, chalk.red('reason:'), reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error(chalk.red('Uncaught Exception:'), error);
  process.exit(1);
});

// „Ç∞„É¨„Éº„Çπ„Éï„É´„Ç∑„É£„ÉÉ„Éà„ÉÄ„Ç¶„É≥
process.on('SIGINT', () => {
  console.log(chalk.yellow('\nüõë Received SIGINT, shutting down gracefully...'));
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log(chalk.yellow('\nüõë Received SIGTERM, shutting down gracefully...'));
  process.exit(0);
});

program.parse();